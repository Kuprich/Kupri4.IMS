@page "/addproduct"

@inject IAddProductUseCase AddProductUseCase
@inject NavigationManager NavigationManager

<h3>Add Product</h3>


<EditForm Model="_product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label class="form-label" for="name">Inventory name</label>
        <InputText class="form-control" id="name" @bind-Value="_product.Name" />
    </div>

    <div class="form-group">
        <label class="form-label" for="description">Description</label>
        <InputText class="form-control" id="description" @bind-Value="_product.Description" />
    </div>

    <div class="form-group">
        <label class="form-label" for="price">Price</label>
        <InputNumber class="form-control" id="price" @bind-Value="_product.Price" />
    </div>

    <br />

    <EditForm Model="_productInventories">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <ProductInventoriesComponent ProductInventories="_productInventories" Product="_product" />
        </div>

    </EditForm>


    <br />

    <button type="submit" class="btn btn-outline-primary">Submit</button>

</EditForm>


@code {
    private Product _product = new();

    private List<ProductInventory>? _productInventories = new();

    private async Task HandleValidSubmit()
    {
        if (_productInventories != null && _productInventories.Count > 0)
        {
            _product.ProductInventories.AddRange(_productInventories);
        }

        await AddProductUseCase.ExecuteAsync(_product);
        NavigationManager.NavigateTo("/products");
    }

}
