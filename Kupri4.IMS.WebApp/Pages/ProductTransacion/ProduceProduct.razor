@page "/produceproduct/{Id}"

@inject NavigationManager NavigationManager

@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IProduceProductUseCase ProduceProductUseCase
@inject IValidateEnoughInventoriesForProducingUseCase ValidateEnoughInventoriesForProducingUseCase

<style>
    .product_info
    .filed_title {
        max-width: 300px;
        font-weight: bold;
    }
</style>


<ErrorMessageComponent @ref="_errorMessageComponent"/>

<h3>Produce @_produceProductViewModel.Product?.Name</h3>
<hr />

<ProductItemInfoComponent Product="_produceProductViewModel.Product"/>

<hr />

<EditForm Model="_produceProductViewModel" OnValidSubmit="OnValidSubmit">
    <FluentValidationValidator />
    <ValidationSummary />

    <div class="form-group">
        <label class="form-label" for="productionOrder">Production order</label>
        <InputText class="form-control" id="productionOrder" @bind-Value="_produceProductViewModel!.ProduceOrder" />
    </div>

    <div class="form-group">
        <label class="form-label" for="productQuantity">Production quantity</label>
        <InputNumber class="form-control" id="productQuantity" @bind-Value="_produceProductViewModel!.ProductQuantity" />
    </div>

    <br />

    <button class="btn btn-outline-primary" type="submit">Produce</button>

</EditForm>



@code {
    [Parameter]
    public string? Id { get; set; }

    private ProduceProductViewModel _produceProductViewModel = new();

    private ErrorMessageComponent? _errorMessageComponent;

    
    protected override async Task OnInitializedAsync()
    {
        Guid productId = Guid.Parse(Id ?? "");
        _produceProductViewModel!.Product = await ViewProductByIdUseCase.ExecuteAsync(productId);
    }

    private async Task OnValidSubmit()
    {
        int producingQuantity = await ValidateEnoughInventoriesForProducingUseCase.ExecuteAsync(_produceProductViewModel.Product!.Id);

        if (producingQuantity >= _produceProductViewModel.ProductQuantity)
        {
            ProductTransactionDto productTransactionDto = new()
                {
                    ProductId = _produceProductViewModel!.Product!.Id,
                    ProductionOrder = _produceProductViewModel.ProduceOrder,
                    Quantity = _produceProductViewModel.ProductQuantity
                };
            await ProduceProductUseCase.ExecuteAsync(productTransactionDto);

            NavigationManager.NavigateTo("/products");
        }
        else
        {
            string message = $"{_produceProductViewModel.ProductQuantity} product(s) can't be produced." +
                $"You can produce a maximum of {producingQuantity} products";

            _errorMessageComponent?.Show(message);
        }
    }

}
